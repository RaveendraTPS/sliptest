//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable()
export class DepartmentAPIClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  getDepartmentById(id: number | undefined): Observable<DepartmentDTO> {
    let url_ = this.baseUrl + "/api/DepartmentAPI/GetDepartmentById?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetDepartmentById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetDepartmentById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DepartmentDTO>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DepartmentDTO>;
    }));
  }

  protected processGetDepartmentById(response: HttpResponseBase): Observable<DepartmentDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DepartmentDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAllDepartment(): Observable<DepartmentDTO[]> {
    let url_ = this.baseUrl + "/api/DepartmentAPI/GetAllDepartment";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllDepartment(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllDepartment(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DepartmentDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DepartmentDTO[]>;
    }));
  }

  protected processGetAllDepartment(response: HttpResponseBase): Observable<DepartmentDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(DepartmentDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addDepartment(body: AddDepartmentDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/DepartmentAPI/AddDepartment";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddDepartment(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddDepartment(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAddDepartment(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateDepartment(body: DepartmentDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/DepartmentAPI/UpdateDepartment";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateDepartment(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateDepartment(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateDepartment(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  deleteDepartment(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/DepartmentAPI/DeleteDepartment?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteDepartment(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteDepartment(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteDepartment(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class LocationAPIClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addlocation(body: AddLocationDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/LocationAPI/Addlocation";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddlocation(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddlocation(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAddlocation(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateLocation(body: LocationDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/LocationAPI/UpdateLocation";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateLocation(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateLocation(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateLocation(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  deleteLocation(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/LocationAPI/DeleteLocation?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteLocation(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteLocation(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteLocation(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getAllLocation(): Observable<void> {
    let url_ = this.baseUrl + "/api/LocationAPI/GetAllLocation";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllLocation(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllLocation(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processGetAllLocation(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  getLocationById(id: number | undefined): Observable<DepartmentDTO> {
    let url_ = this.baseUrl + "/api/LocationAPI/GetLocationById?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetLocationById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetLocationById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DepartmentDTO>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DepartmentDTO>;
    }));
  }

  protected processGetLocationById(response: HttpResponseBase): Observable<DepartmentDTO> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DepartmentDTO.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class WeatherForecastClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  weatherForecast(): Observable<WeatherForecast[]> {
    let url_ = this.baseUrl + "/WeatherForecast";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processWeatherForecast(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processWeatherForecast(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<WeatherForecast[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
    }));
  }

  protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(WeatherForecast.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class AddDepartmentDTO implements IAddDepartmentDTO {
  title?: string | null;
  description?: string | null;
  jobCode?: number;
  isActive?: boolean;

  constructor(data?: IAddDepartmentDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.jobCode = _data["jobCode"] !== undefined ? _data["jobCode"] : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
    }
  }

  static fromJS(data: any): AddDepartmentDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddDepartmentDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["title"] = this.title !== undefined ? this.title : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["jobCode"] = this.jobCode !== undefined ? this.jobCode : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    return data;
  }
}

export interface IAddDepartmentDTO {
  title?: string | null;
  description?: string | null;
  jobCode?: number;
  isActive?: boolean;
}

export class AddLocationDTO implements IAddLocationDTO {
  city?: string | null;
  country?: string | null;
  state?: string | null;
  pincode?: string | null;
  isActive?: boolean;

  constructor(data?: IAddLocationDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
      this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
      this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
      this.pincode = _data["pincode"] !== undefined ? _data["pincode"] : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
    }
  }

  static fromJS(data: any): AddLocationDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddLocationDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["city"] = this.city !== undefined ? this.city : <any>null;
    data["country"] = this.country !== undefined ? this.country : <any>null;
    data["state"] = this.state !== undefined ? this.state : <any>null;
    data["pincode"] = this.pincode !== undefined ? this.pincode : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    return data;
  }
}

export interface IAddLocationDTO {
  city?: string | null;
  country?: string | null;
  state?: string | null;
  pincode?: string | null;
  isActive?: boolean;
}

export class DepartmentDTO implements IDepartmentDTO {
  pkDepartmentId?: number;
  title?: string | null;
  description?: string | null;
  jobCode?: number;
  isActive?: boolean;

  constructor(data?: IDepartmentDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pkDepartmentId = _data["pkDepartmentId"] !== undefined ? _data["pkDepartmentId"] : <any>null;
      this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
      this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
      this.jobCode = _data["jobCode"] !== undefined ? _data["jobCode"] : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
    }
  }

  static fromJS(data: any): DepartmentDTO {
    data = typeof data === 'object' ? data : {};
    let result = new DepartmentDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pkDepartmentId"] = this.pkDepartmentId !== undefined ? this.pkDepartmentId : <any>null;
    data["title"] = this.title !== undefined ? this.title : <any>null;
    data["description"] = this.description !== undefined ? this.description : <any>null;
    data["jobCode"] = this.jobCode !== undefined ? this.jobCode : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    return data;
  }
}

export interface IDepartmentDTO {
  pkDepartmentId?: number;
  title?: string | null;
  description?: string | null;
  jobCode?: number;
  isActive?: boolean;
}

export class LocationDTO implements ILocationDTO {
  pkLocationID?: number;
  city?: string | null;
  country?: string | null;
  state?: string | null;
  pincode?: string | null;
  isActive?: boolean;

  constructor(data?: ILocationDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pkLocationID = _data["pkLocationID"] !== undefined ? _data["pkLocationID"] : <any>null;
      this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
      this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
      this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
      this.pincode = _data["pincode"] !== undefined ? _data["pincode"] : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
    }
  }

  static fromJS(data: any): LocationDTO {
    data = typeof data === 'object' ? data : {};
    let result = new LocationDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pkLocationID"] = this.pkLocationID !== undefined ? this.pkLocationID : <any>null;
    data["city"] = this.city !== undefined ? this.city : <any>null;
    data["country"] = this.country !== undefined ? this.country : <any>null;
    data["state"] = this.state !== undefined ? this.state : <any>null;
    data["pincode"] = this.pincode !== undefined ? this.pincode : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    return data;
  }
}

export interface ILocationDTO {
  pkLocationID?: number;
  city?: string | null;
  country?: string | null;
  state?: string | null;
  pincode?: string | null;
  isActive?: boolean;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | null;
  title?: string | null;
  status?: number | null;
  detail?: string | null;
  instance?: string | null;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property))
          this[property] = _data[property];
      }
      this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
      this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
      this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
      this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
      this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property))
        data[property] = this[property];
    }
    data["type"] = this.type !== undefined ? this.type : <any>null;
    data["title"] = this.title !== undefined ? this.title : <any>null;
    data["status"] = this.status !== undefined ? this.status : <any>null;
    data["detail"] = this.detail !== undefined ? this.detail : <any>null;
    data["instance"] = this.instance !== undefined ? this.instance : <any>null;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | null;
  title?: string | null;
  status?: number | null;
  detail?: string | null;
  instance?: string | null;

  [key: string]: any;
}

export class WeatherForecast implements IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  readonly temperatureF?: number;
  summary?: string | null;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
      this.temperatureC = _data["temperatureC"] !== undefined ? _data["temperatureC"] : <any>null;
      (<any>this).temperatureF = _data["temperatureF"] !== undefined ? _data["temperatureF"] : <any>null;
      this.summary = _data["summary"] !== undefined ? _data["summary"] : <any>null;
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === 'object' ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["date"] = this.date ? this.date.toISOString() : <any>null;
    data["temperatureC"] = this.temperatureC !== undefined ? this.temperatureC : <any>null;
    data["temperatureF"] = this.temperatureF !== undefined ? this.temperatureF : <any>null;
    data["summary"] = this.summary !== undefined ? this.summary : <any>null;
    return data;
  }
}

export interface IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | null;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
